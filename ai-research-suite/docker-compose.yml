version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - frontend
    networks:
      - research-network
    restart: unless-stopped

  # API Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 8080
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-research_suite}
      REDIS_URL: redis://redis:6379
      SEARX_ENDPOINT: ${SEARX_ENDPOINT:-http://searxng:8888}
      LITELLM_API_KEY: ${LITELLM_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    volumes:
      - ./backend/config:/app/config:ro
      - ./data/reports:/app/reports
      - ./data/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - research-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      API_URL: http://api:8080
    networks:
      - research-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-research_suite}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - research-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-research_suite}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - research-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # searXNG Search Engine
  searxng:
    image: searxng/searxng:latest
    environment:
      SEARXNG_BASE_URL: http://localhost:8888/
      SEARXNG_SECRET: ${SEARXNG_SECRET}
      BIND_ADDRESS: 0.0.0.0:8888
    volumes:
      - ./docker/searxng:/etc/searxng:rw
    networks:
      - research-network
    restart: unless-stopped
    ports:
      - "8888:8888"

  # KaibanJS Orchestrator (optional separate service)
  kaibanjs:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      REDIS_URL: redis://redis:6379
      NODE_ENV: ${NODE_ENV:-production}
    depends_on:
      - redis
    networks:
      - research-network
    restart: unless-stopped

  # Bull Dashboard for Queue Monitoring (development)
  bull-board:
    image: deadly0/bull-board
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    ports:
      - "3000:3000"
    networks:
      - research-network
    profiles:
      - development

volumes:
  postgres-data:
  redis-data:

networks:
  research-network:
    driver: bridge